<문제>

* 문제 설명
배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,

arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.
arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.
배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.

* 제한사항
배열 arr의 크기 : 1,000,000 이하의 자연수
배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수

* 입출력 예
arr	answer
[1,1,3,3,0,1,1]	[1,3,0,1]
[4,4,4,3,3]	[4,3]

* 입출력 예 설명
입출력 예 #1,2
문제의 예시와 같습니다.

<풀이>
function solution(arr)
{
    var answer = [];

    arr.forEach((item)=>{
        if(answer.includes(item)) return;
        answer.push(item);
    })
    
    return answer;
}
처음엔 이렇게 생각을 했었다.
새로만드는 배열안에 이미 넣은 수가 있다면? 건너뛰고 다음 수를 push!
하지만 문제는 안에 있는 수를 다 건너뛰는게 아니라 연속되는 수만 건너뛰어야하기때문에 문제에 맞지 않는다.
 

function solution(arr)
{
    var answer = [];
    var c=0;

    arr.forEach((item,i)=>{
        if(answer[c-1]==item) return;
        answer.push(item);
        c++;
    })
    
    return answer;
}
그래서 그 다음으로 생각한게 c라는 변수를 따로 두어서 answer이라는 새 배열의 index를 따로 계산하고
그 index보다 하나 앞의 수가 지금 넣으려는 수와 같다면 건너뛰기라고 생각해서
문제를 해결했다.

 

하지만.. 쓸데없이 새로 만드는 변수가 조금 거슬렸다
더 간단하게 만들고싶다!

 

그래서 다른 사람들의 풀이를 봤더니 역시..궁금증이 바로 해결되었다.
바로 anwer의 length를 사용하는것!! 이를 사용해서 내 코드를 수정해보았다.

function solution(arr)
{
    var answer = [];

    arr.forEach((item,i)=>{
        if(answer[answer.length-1]==item) return;
        answer.push(item);
    })
    
    return answer;
}
별거아니지만 훨씬 깔끔해졌다!


+다른사람들 코드

function solution(arr)
{
    return arr.filter((val,index) => val != arr[index+1]);
}
오..filter...엄청 간단하네..하지만 난 내 코드도 좋앙...