<문제>

문제 설명
어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다. z는 1만큼 밀면 a가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.

제한 조건
공백은 아무리 밀어도 공백입니다.
s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.
s의 길이는 8000이하입니다.
n은 1 이상, 25이하인 자연수입니다.
입출력 예
s	n	result
AB	1	BC
z	1	a
a B z	4	e F d

<풀이>
접근법을 생각하며 문제를 해결한 것도 재밌었지만 

수정수정수정을 통해 더 나은 코드를 만드는 과정이 꽤나 재밌었던 문제였다.

function solution(s, n) {
    let idx = 0;
    let alpha = 'abcdefghijklmnopqrstuvwxyz';
    let arrLow = alpha.split('');
    let arrUp = alpha.toUpperCase().split('');
    
    return s.split('').map((e)=>{
        if(e === ' ') return ' ';
        idx = arrUp.indexOf(e.toUpperCase());
        if(e === e.toUpperCase()){
            if(idx + n > arrUp.length-1) return arrUp[idx+n-arrUp.length];
            return arrUp[idx+n];            
        }else{
            if(idx + n > arrLow.length-1) return arrLow[idx+n-arrUp.length];
            return arrLow[idx+n];            
        }
    }).join('');
}
초기 코드는 굉장히 복잡해보이고 똑같은 것들을 반복하여 지저분해보였다.

 

function solution(s, n) {
    let idx = 0;
    let arr = [];
    let alpha = 'abcdefghijklmnopqrstuvwxyz';
    
    return s.split('').map((e)=>{
        if(e === ' ') return ' ';
        arr = (e === e.toUpperCase()) ? alpha.toUpperCase().split('') : alpha.split('');
        idx = arr.indexOf(e);
        if(idx + n > arr.length-1) return arr[idx+n-arr.length];
        return arr[idx+n];
    }).join('');
}
최종완성코드

각 상황에 대한 조건문을 사용해서 같은 문장을 반복하던 코드를

조건에 맞게 배열을 수정함으로써 깔끔하게 코드를 수정했다.