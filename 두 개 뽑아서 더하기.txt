<문제>

* 문제 설명
정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.

* 제한사항
numbers의 길이는 2 이상 100 이하입니다.
numbers의 모든 수는 0 이상 100 이하입니다.

* 입출력 예
numbers	result
[2,1,3,4,1]	[2,3,4,5,6,7]
[5,0,2,7]	[2,5,7,9,12]

* 입출력 예 설명
입출력 예 #1

2 = 1 + 1 입니다. (1이 numbers에 두 개 있습니다.)
3 = 2 + 1 입니다.
4 = 1 + 3 입니다.
5 = 1 + 4 = 2 + 3 입니다.
6 = 2 + 4 입니다.
7 = 3 + 4 입니다.
따라서 [2,3,4,5,6,7] 을 return 해야 합니다.

입출력 예 #2

2 = 0 + 2 입니다.
5 = 5 + 0 입니다.
7 = 0 + 7 = 5 + 2 입니다.
9 = 2 + 7 입니다.
12 = 5 + 7 입니다.
따라서 [2,5,7,9,12] 를 return 해야 합니다.

<풀이>
이중반복문을 통해서 모든 항을 더해주는데
이때 더한 값이 이미 나온값이 아닌 경우에만 배열에 push해서 새 배열을 만들어준다.
그리고 오름차순으로 정렬한 배열을 return해준다.


또한 이미 더한값은 다시 계산할 필요가 없기때문에 더해주는값 j는 i+1번째부터 더해주면 더 빠르고 쓸데없이 낭비하지 않는 코드가 될 것 같았다.

function solution(numbers) {
    var answer = [];
    for(var i=0; i<numbers.length; i++){
        for(var j=i+1; j<numbers.length; j++){
            if(!answer.includes(numbers[i]+numbers[j])){
            answer.push(numbers[i]+numbers[j]);
            }
        }
    }
    return answer.sort((a,b)=>a-b);
}
 

if(answer.includes(numbers[i]+numbers[j])) return;
answer.push(numbers[i]+numbers[j]);

그런데 이런식으로 이미 배열에 값이 있을 경우에는 return으로 나가버렸더니 return값으로 답을 내야하는 이 경우에
for문이고 if문이고 다 나가버려서 모든 배열을 다 계산해주지 못해서 알맞지 않았다.

 

그래서 다시 if(!경우)로 감싸서 간단하게 해결했다!